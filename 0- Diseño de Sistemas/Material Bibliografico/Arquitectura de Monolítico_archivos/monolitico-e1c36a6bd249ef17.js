(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4480],{45236:function(e,a,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/es/estilos-arquitectonicos/monolitico",function(){return o(4607)}])},92838:function(e,a,o){"use strict";var s=o(85893),n=o(25675),i=o.n(n);o(67294);let r=e=>(0,s.jsxs)("article",{className:"tip flex gap-4 m-0 md:m-10 p-4",style:{borderLeft:"2px solid var(--color-red-light)"},children:[(0,s.jsx)(i(),{width:"64",height:"64",src:(()=>{switch(e.type){case"tip":default:return"/icons/tip.png";case"concepto":return"/icons/concepto.png"}})(),alt:"tip",className:"icon w-16 h-16 "}),(0,s.jsxs)("div",{children:[(0,s.jsx)("p",{className:"mb-4",children:(0,s.jsx)("strong",{children:e.title})}),(0,s.jsx)("div",{className:"m-0",children:e.children||e.message})]})]});a.Z=r},33064:function(e,a,o){"use strict";var s=o(85893);o(67294);var n=o(41664),i=o.n(n);let r=e=>(0,s.jsxs)("article",{className:"book-banner",children:[(0,s.jsx)("div",{children:(0,s.jsx)("img",{className:"book-img d-none d-md-block responsive lazy","data-src":"/books/arquitectura.png",alt:"Introducci\xf3n a la arquitectura de software"})}),(0,s.jsxs)("div",{children:[(0,s.jsxs)("p",{className:"mb-4",children:["Todo lo que acabas de ver en este art\xedculo es solo una peque\xf1a parte del libro ",(0,s.jsx)(i(),{href:"/books/software-architecture/es",children:"Introducci\xf3n a la arquitectura de software"}),", el libro m\xe1s completo en espa\xf1ol sobre arquitectura de software, donde cubrimos los temas m\xe1s importantes para convertirte en un arquitecto de software profesional."]}),(0,s.jsx)("p",{className:"mb-4",children:"\xbfQuieres convertirte en arquitecto de software pero no sabes cu\xe1l es el camino adecuando? o simplemente no sabes que gu\xeda estudiar para convertirte en arquitecto de software, te invito a que veas mi libro:"}),(0,s.jsx)(i(),{href:"/books/software-architecture/es",legacyBehavior:!0,children:(0,s.jsx)("a",{className:"btn btn-block btn-pink block text-center rounded-md",children:"Ver libro"})})]})]});a.Z=r},4607:function(e,a,o){"use strict";o.r(a);var s=o(85893);o(67294);var n=o(25675),i=o.n(n),r=o(9008),l=o.n(r),c=o(97518),d=o(92838),t=o(33064);let u=e=>(0,s.jsxs)("div",{className:"",children:[(0,s.jsx)(l(),{children:(0,s.jsx)("title",{children:"Arquitectura de Monol\xedtico"})}),(0,s.jsx)(c.Z,{children:(0,s.jsxs)("main",{children:[(0,s.jsx)("h1",{children:"Arquitectura Monol\xedtica"}),(0,s.jsx)("small",{className:"subtitle",children:"Estilo arquitect\xf3nico"}),(0,s.jsx)("p",{children:"El estilo arquitect\xf3nico monol\xedtico consiste en crear una aplicaci\xf3n autosuficiente que contenga absolutamente toda la funcionalidad necesaria para realizar la tarea para la cual fue dise\xf1ada, sin contar con dependencias externas que complementen su funcionalidad. En este sentido, sus componentes trabajan juntos, compartiendo los mismos recursos y memoria. En pocas palabras, una aplicaci\xf3n monol\xedtica es una unidad cohesiva de c\xf3digo."}),(0,s.jsx)("figure",{children:(0,s.jsx)(i(),{width:"815",height:"311",src:"/figures/monolitic-lg.png",alt:"Arquitectura de onol\xedtico"})}),(0,s.jsx)("p",{children:"Un monol\xedtico podr\xedas estar construido como una sola unidad de software o creada a partir de varios m\xf3dulo o librer\xedas, pero lo que la distingue es que al momento de compilarse se empaqueta como una solo pieza, de tal forma que todos los m\xf3dulos y librer\xedas se empaquetar\xe1n junto con la aplicaci\xf3n principal."}),(0,s.jsx)("p",{children:"El estilo monol\xedtico no es algo que haya sido planeado o ideado por alguien en particular, si no que todas las aplicaciones al inicio de la computaci\xf3n nac\xedan con este estilo arquitect\xf3nico. Solo hace falta recordar los sistemas antiguos, donde todo funcionaba en una s\xfaper computadora, la cual realizaba todas las tareas. Recordemos que al inicio no exist\xedan el internet, por lo que no hab\xeda forma de consumir servicios externos para realizar determinadas tareas, en su lugar, el sistema monol\xedtico ten\xeda que implementar absolutamente toda la funcionalidad necesaria para funcionar, y de esta forma ser auto suficiente."}),(0,s.jsx)("p",{children:"Con el tiempo, llego el internet y con ello la posibilidad de consumir servicios externos, llegaron arquitecturas modulares que permit\xedan separar el c\xf3digo en unidades de software m\xe1s manejables, cohesivas y f\xe1cil de administrar, sin embargo, con todos estos avances, siguen existiendo las aplicaciones Monol\xedticas, las cuales son vistas por los inexpertos como algo malo o incluso como un Anti patr\xf3n, pero la realidad es que esto est\xe1 muy alejado de la realidad."}),(0,s.jsx)("p",{children:"A pesar de todo el estigma que tienen las aplicaciones monol\xedticas, la realidad es que, hasta el d\xeda de hoy, las aplicaciones monol\xedticas siguen teniendo un protagonismo muy importante y siguen existiendo caso donde son totalmente indispensables para mantener la operaci\xf3n de las empresas."}),(0,s.jsx)("p",{children:"Puede parecer un poco tonto el solo hecho de pensar en hacer una aplicaci\xf3n monol\xedtica hoy en d\xeda, sin embargo, todav\xeda hay escenarios donde son totalmente necesaria, solo imagina el sistema venta y facturaci\xf3n de una peque\xf1a empresa, el software de los equipos m\xe9dicos, programas de escritorio, como procesadores de texto o incluso sistemas m\xe1s completos como los cl\xe1sicos CRM o ERP."}),(0,s.jsx)("p",{children:"Todos estos sistemas muchas veces funcionan de forma independiente, sin acceso a internet y necesitan una autonom\xeda total, solo imagina que un equipo m\xe9dico no funcione si no se puede conectar a internet o que necesite de servicios externos para operar, eso podr\xeda costar vidas, o que el cajero de una tienda no pueda vender o administrar su inventario porque una dependencia no est\xe1 disponible, eso podr\xeda costar la perdida de ventas. Lo cierto es que las aplicaciones monol\xedticas son cada vez menos atractivas, pero hasta el d\xeda de hoy, tiene aplicaciones donde dif\xedcilmente podr\xe1n ser remplazadas. "}),(0,s.jsx)("p",{children:"Una falsa creencia es que, una aplicaci\xf3n monol\xedtica es un caos por dentro, donde todo el c\xf3digo est\xe1 amontonado, no hay una estructura clara y que por lo general tiene miles de clases u objetos, sin embargo, esto es solo una mala fama que se le ha dado, si bien es verdad que se pod\xeda dar el caso, recordemos que eso tambi\xe9n se podr\xeda dar en cualquier estilo de arquitectura, pues eso dependen m\xe1s bien del programador y no del estilo arquitect\xf3nico."}),(0,s.jsx)("p",{children:"Otra falsa creencia es creer que las aplicaciones Monol\xedticas son solo las aplicaciones grand\xedsimas que hacen un mont\xf3n de cosas, pero lo cierto es que un monol\xedtico puede ser de una sola clase, o de miles, lo que define un estilo monol\xedtico no es el n\xfamero de clases, archivos o l\xedneas de c\xf3digo, lo que lo define es que es autosuficiente, es decir, que tiene toda la funcionalidad para operar por s\xed mismo y sin depender de nadie m\xe1s."}),(0,s.jsx)(d.Z,{title:"Tip: Independencia",children:(0,s.jsx)("div",{children:"Quiz\xe1s la palabra que mejor define a un monol\xedtico es la Independencia, pues es la capacidad m\xe1s notable que tiene."})}),(0,s.jsx)("h2",{children:"Como se estructura un Monol\xedtico"}),(0,s.jsx)("p",{children:"En los Monol\xedtico podemos tener una serie de paquetes bien organizados y un c\xf3digo muy claro, donde cada paquete puede tener cierta parte de la funcionalidad y est\xe1n desacoplados uno de otro (recordemos que eso es independiente del estilo arquitect\xf3nico). Sin embargo, al momento de compilarse el c\xf3digo, todo se empaqueta como un solo software. Cabe mencionar que cualquier librer\xeda que sea requerida, ser\xe1 exportada como parte del archivo compilado de salida."}),(0,s.jsx)("p",{children:"Algo a tomar en cuenta es que cuando los m\xf3dulos son compilados por separado y son instalados como complementos ya no se trata de un Monol\xedtico y pasar a ser un estilo arquitect\xf3nico de Microkernel, el cual analizaremos m\xe1s adelante."}),(0,s.jsxs)("figure",{children:[(0,s.jsx)(i(),{width:"832",height:"386",src:"/figures/monolitic.png",alt:"Arquitectura monol\xedtica"}),(0,s.jsx)("figcaption",{children:"Fig 34 â€“ Proceso de compilaci\xf3n."})]}),(0,s.jsx)("p",{children:"En la imagen podemos apreciar c\xf3mo funciona el proceso de compilaci\xf3n de una aplicaci\xf3n Monol\xedtica, el cual todos los paquetes junto con sus dependencias son compilados y da como resultado un solo artefacto, el cual incluye todo el c\xf3digo junto con las dependencias. En este ejemplo decimos que hemos creado un EXE, pero se pudo haber creado un Jar en el caso de Java o un JS en el caso de JavaScript, dependiendo la tecnolog\xeda utilizada tendremos un artefacto diferente, pero al final, todos contendr\xe1n todo el c\xf3digo con sus dependencias."}),(0,s.jsx)("h2",{children:"Caracter\xedsticas de un Monol\xedtico"}),(0,s.jsx)("p",{children:"En esta secci\xf3n analizaremos las caracter\xedsticas que distinguen al estilo Monol\xedtico del resto. Las caracter\xedsticas no son ventajas o desventajas, si no que m\xe1s bien, nos sirven para identificar cuando una aplicaci\xf3n sigue un determinado estilo arquitect\xf3nico. "}),(0,s.jsx)("p",{children:"Las caracter\xedsticas se pueden convertir en ventajas o desventajas solo cuando analizamos la problem\xe1tica que vamos a resolver, mientras tanto, son solo caracter\xedsticas:"}),(0,s.jsxs)("ol",{children:[(0,s.jsx)("li",{children:"Son aplicaciones autosuficientes (no requieren de nada para funcionar)."}),(0,s.jsx)("li",{children:"Realizan de punta a punta todas las operaciones para terminar una tarea."}),(0,s.jsx)("li",{children:"Son por lo general aplicaciones grandes, un que no es un requisito."}),(0,s.jsx)("li",{children:"Son por lo general silos de datos privados, es decir, cada instalaci\xf3n administra si propia base de datos."}),(0,s.jsx)("li",{children:"Todo el sistema corre sobre una solo plataforma."})]}),(0,s.jsx)("h2",{children:"Ventajas"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"F\xe1cil de desarrollar"}),": Debido a que solo existe un componente, es muy f\xe1cil para un equipo peque\xf1o de desarrollo iniciar un nuevo proyecto y ponerlo en producci\xf3n r\xe1pidamente. "]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"F\xe1cil de escalar"}),": Solo es necesario instalar la aplicaci\xf3n en varios servidores y ponerlo detr\xe1s de un balanceador de cargar."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Pocos puntos de fallo"}),": El hecho de no depender de nadie m\xe1s, mitiga gran parte de los errores de comunicaci\xf3n, red, integraciones, etc. Pr\xe1cticamente los errores que pueden salir son por alg\xfan bug del programador, pero no por factores ajenos."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Aut\xf3nomo"}),": Las aplicaciones Monol\xedticas se caracterizan por ser totalmente aut\xf3nomas (auto suficientes), lo que les permite funcionar independientemente del resto de aplicaciones."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Performance"}),": Las aplicaciones Monol\xedticas son significativamente m\xe1s r\xe1pidas debido que todo el procesamiento lo realizan localmente y no requieren consumir procesos distribuidos para completar una tarea."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"F\xe1cil de probar"}),": Debido a que es una sola unidad de c\xf3digo, toda la funcionalidad est\xe1 disponible desde el inicio de la aplicaci\xf3n, por lo que es posible realizar todas las pruebas necesarias sin depender de nada m\xe1s. "]})]}),(0,s.jsx)("h2",{children:"desventajas"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Anclado a un Stack tecnol\xf3gico"}),": Debido a que todo el software es una sola pieza, implica que utilicemos el mismo Stack tecnol\xf3gico para absolutamente todo, lo que impide que aprovechemos todas las tecnolog\xedas disponibles."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Escalado Monol\xedtico"}),": Escalar una aplicaci\xf3n Monol\xedtica implica escalar absolutamente toda la aplicaci\xf3n, gastando recursos para funcionalidad que quiz\xe1s no necesita ser escalada (en el estilo de Microservicios analizaremos como solucionar esto)."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"El tama\xf1o s\xed importa"}),": sin albur, las aplicaciones Monol\xedticas son f\xe1cil de operar con equipo peque\xf1os, pero a medida que la aplicaci\xf3n crece y con ello el equipo de desarrollo, se vuelve cada vez m\xe1s complicado dividir el trabajo sin afectar funcionalidad que otro miembro del equipo tambi\xe9n est\xe1 moviendo."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Versi\xf3n tras versi\xf3n"}),": Cualquier m\xednimo cambio en la aplicaci\xf3n implicar\xe1 realizar una compilaci\xf3n del todo el artefacto y con ello una nueva versi\xf3n que tendr\xe1 que ser administrada."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Si falla, falla todo"}),": A menos que tengamos alta disponibilidad, si la aplicaci\xf3n Monol\xedtica falla, falla todo el sistema, quedando totalmente inoperable."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Es f\xe1cil perder el rumbo"}),": Por la naturaleza de tener todo en un mismo m\xf3dulo es f\xe1cil caer en malas pr\xe1cticas de programaci\xf3n, separaci\xf3n de responsabilidades y organizaci\xf3n de las clases del c\xf3digo."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)("strong",{children:"Puede ser abrumador"}),": En proyectos muy grandes, puede ser abrumador para un nuevo programador hacer un cambio en el sistema. "]})]}),(0,s.jsx)("h2",{children:"Conclusiones"}),(0,s.jsx)("p",{children:"A pesar de la mala fama que se les ha dado a las aplicaciones Monol\xedticas, la realidad es que tiene ventajas que hasta el d\xeda de hoy son dif\xedciles de igualar, entre las que destacan su total independencia el performance que puede llegar a alcanzar."}),(0,s.jsx)("p",{children:"Utilizar un estilo Monol\xedtico no es para nada malo, incluso en nuestra \xe9poca, lo malo ser\xeda quedarnos siempre atascados en este estilo arquitect\xf3nico y no ir migrando a otros estilos m\xe1s sofisticados a medida que nuestra aplicaci\xf3n va creciendo. Algunos s\xedntomas de que el estilo arquitect\xf3nico ya nos comienza a quedar chico ser\xeda cuando, cada vez es m\xe1s dif\xedcil dividir el trabajo entre los desarrolladores sin que tengan conflictos con el c\xf3digo, existen una necesidad de escalamiento m\xe1s quir\xfargica y se necesita escalar ciertas funcionalidades y no todo el proyecto, cuando el proyecto es tan grande que es complicado para los desarrolladores comprender el funcionamiento por la complejidad y la absurda cantidad de clases o archivos, y finalmente, cuando necesitamos empezar a diversificarnos con respecto al Stack tecnol\xf3gico a utilizar."}),(0,s.jsx)("h2",{children:"Acerca de este libro"}),(0,s.jsx)(t.Z,{}),(0,s.jsx)("small",{className:"reserve",children:"Todos los derechos reservados \xa9"})]})})]});a.default=u},9008:function(e,a,o){e.exports=o(42636)},11163:function(e,a,o){e.exports=o(96885)}},function(e){e.O(0,[1664,5675,7518,9774,2888,179],function(){return e(e.s=45236)}),_N_E=e.O()}]);